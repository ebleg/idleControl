function [V_m] = identify_intakemanifold(dataFile, pars, plot_validation_toggle)
%IDENTIFY volume of the INTAKE MANIFOLD

%% load data
data = load(dataFile);
meas = data.meas;

%% initialize V_m such that the model runs
pars.id.V_m = pars.init.V_m;

%% set fminserach options 
efun_fminsearch = @(V_m) model_error(V_m, meas, pars);


%% call fminsearch
V_m = fminsearch(efun_fminsearch, pars.init.V_m, pars.fmin_opt);

%% validate
if plot_validation_toggle
    % plot stuff
end
     
end

function [error] = model_error(V_m , meas, pars)
%% error function for V_m
pars.id.V_m = V_m;
[~, ~, p_m_model] = sim('id_manifold_model.slx',... %% ###insert model name here###
    [meas.time(1) meas.time(end)],...
    pars.sim_opt,...
    [meas.time', meas.u_alpha.signals.values', meas.omega_e.signals.values']); %% add other inputs

error = sum((meas.p_m.signals.values./10^5 - p_m_model'./10^5).^2);

get(0,'CurrentFigure'); % use current figure - do not set it on top in each update process
plot(Data.time, Data.p, 'b');hold on;grid on;
plot(time,y,'-r');hold off; % "holf off" is important here, otherwise you always see the results of all past simulations.
xlabel('Time [s]');
ylabel('Intake Manifold Pressure [Pa]');
legend('Measurements','Simulation','Location','East');

set(gca,'XLim',[Data.time(1) Data.time(end)]);
set(gca,'YLim',[min(Data.p)-1/10*mean(Data.p) max(Data.p)+1/10*mean(Data.p)]);

drawnow
end

